var r=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3;if("number"!=typeof r&&r<=0)throw new Error("You have to add a number at least 1");for(var e="",t="0123456789",n=0;n<r;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},e=function(r,e){if("number"!=typeof r&r<=-1)throw new Error("Only accept number here, start from 0");if("number"!=typeof e&e<=0)throw new Error("Only accept number here, start from 1");for(var t=[];r<=e;)t.push(r++);return t},t=function(r){return!isNaN(r)&&"number"==typeof Number(r)},n=function(r){if("number"!=typeof r&&"string"!=typeof r)throw new Error("You must input only number format here");return 1===Math.sign(r)},o=function(r){if("number"!=typeof r&&"string"!=typeof r)throw new Error("You must input only number format here");return-1===Math.sign(r)},u=function(r){return"string"==typeof r},i=function(r,e,n){if(!t(r))throw new Error("This is left operand and must be in number type");if(!t(e))throw new Error("This is left operand and must be in number type");if(!u(n))throw new Error("Operator must be one of these: add, subtract, multiply, divide, reminder or exponent");var o=0;return"add"===n||"addition"===n||"plus"===n||"+"===n?o=Number(r)+Number(e):"subtract"===n||"subtraction"===n||"minus"===n||"-"===n?o=Number(r)-Number(e):"multiply"===n||"multiplication"===n||"ร"===n||"*"===n?o=Number(r)*Number(e):"divide"===n||"division"===n||"รท"===n||"/"===n?o=Number(r)/Number(e):"remainder"===n||"modulo"===n||"%"===n?o=Number(r)%Number(e):"exponent"!==n&&"exponentiation"!==n&&"**"!==n||(o=Math.pow(Number(r),Number(e))),o};function a(r){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}function c(r,e,t){return e in r?Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[e]=t,r}function b(r,e){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(r);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.push.apply(t,n)}return t}function f(r){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?b(Object(t),!0).forEach((function(e){c(r,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))}))}return r}var m=function(r){return"object"===a(r)&&null!==r&&"[object Object]"===Object.prototype.toString.call(r)},p=function(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"USD",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en-US",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!t(r))throw new Error("Amount must be in a number type");if(!u(e)&&3===e.length)throw new Error("Currency code must have at least 3 uppercase character");if(!u(n))throw new Error("Locale code must contain 2 languages and 2 country code and separated by dash (-)");if(!m(o))throw new Error("Currency options must be in object type");return new Intl.NumberFormat(n,f({style:"currency",currency:e.toUpperCase()},o)).format(r)};export{i as calc,p as currency,o as isNegative,t as isNumber,n as isPositive,e as loop,r as random};
